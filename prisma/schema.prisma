// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String      @id @default(uuid()) // Primary key yang jadi index
  username   String      @unique
  name       String
  email      String      @unique // !index
  password   String
  avatar     String
  roleId     String      @default("devcr3w-45-u53r")
  role       Role        @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bio        String      @db.Text
  token      TokenEmail?
  post       Post[]
  category   Category[]
  comment    Comment[]
  rating     Rating[]
  isVerified Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([email])
  @@index([username])
}

model Role {
  id        String   @id @default(uuid())
  name      String
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TokenEmail {
  id        String   @id @default(uuid())
  token     String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
}

model Category {
  id           String         @id @default(uuid())
  name         String         @unique
  slug         String
  image        String
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postCategory PostCategory[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Post {
  id                 String             @id @default(uuid())
  title              String
  desc               String             @db.Text
  budget             Int
  slug               String
  officeHours        String
  latitude           String
  longitude          String
  address            String
  city               String
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postCategory       PostCategory[]
  postImage          PostImage[]
  rating             Rating[]
  comment            Comment[]
  transactionsItems TransactionsItem[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model PostCategory {
  id         String   @id @default(uuid())
  postId     String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PostImage {
  id        String   @id @default(uuid())
  name      String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        String   @id @default(uuid())
  rate      Float
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  message   String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id                 String              @id @db.VarChar(110)
  total              Int
  status             transactions_status
  customerName       String              @db.VarChar(255)
  customerEmail      String              @db.VarChar(255)
  snapToken          String?             @db.VarChar(255)
  snapRedirectUrl    String?             @db.VarChar(255)
  paymentMethod      String?             @db.VarChar(110)
  createdAt          DateTime?           @default(now()) @db.Timestamp(0)
  updatedAt          DateTime?           @default(now()) @db.Timestamp(0)
  transactionsItems TransactionsItem[]


}

model TransactionsItem {
  id            String      @id @default(uuid())
  transactionId String      @db.VarChar(110)
  postId      String      
  createdAt     DateTime?   @default(now()) @db.Timestamp(0)
  updatedAt     DateTime?   @default(now()) @db.Timestamp(0)
  transactions  Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade ,onUpdate: Cascade)
  post          Post        @relation(fields: [postId], references: [id], onDelete: Cascade ,onUpdate: Cascade)

  
 

}

enum transactions_status {
  PENDING_PAYMENT
  PAID
  CANCELED
}
